Here are the commands I used:
#+BEGIN_SRC bash
bundle install 
bundle exec rake db:migrate db:seed
#+END_SRC

Related output:
#+BEGIN_SRC bash
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/phase-3-sinatra-with-active-record-get $ bundle install
Fetching gem metadata from https://rubygems.org/.............
Resolving dependencies...
Using rake 13.0.6
Using concurrent-ruby 1.1.9
Using minitest 5.14.4
Using zeitwerk 2.4.2
Using bundler 2.2.23
Using coderay 1.1.3
Using database_cleaner-core 2.0.1
Using diff-lcs 1.4.4
Using ffi 1.15.3
Using rb-fsevent 0.11.0
Using method_source 1.0.0
Using ruby2_keywords 0.0.5
Using rack 2.2.3
Using require_all 3.0.0
Using rspec-support 3.10.2
Using tilt 2.0.10
Fetching rspec-json_expectations 2.2.0
Using sqlite3 1.4.2
Using i18n 1.8.10
Using tzinfo 2.0.4
Using rb-inotify 0.10.1
Using mustermann 1.1.1
Using pry 0.14.1
Using rack-protection 2.1.0
Using rack-test 1.1.0
Using rspec-core 3.10.1
Using rspec-expectations 3.10.1
Using rspec-mocks 3.10.2
Using activesupport 6.1.4
Using faker 2.18.0
Using listen 3.5.1
Using rspec 3.10.0
Using sinatra 2.1.0
Using activemodel 6.1.4
Using rerun 0.13.1
Using activerecord 6.1.4
Using database_cleaner-active_record 2.0.1
Using sinatra-activerecord 2.0.23
Using database_cleaner 2.0.1
Installing rspec-json_expectations 2.2.0
Bundle complete! 13 Gemfile dependencies, 39 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
samuelbanya@Samuels-MBP ~/hub/Development/code/phase-3/phase-3-sinatra-with-active-record-get $ bundle exec rake db:migrate db:seed
== 20210719113216 CreateGames: migrating ======================================
-- create_table(:games)
   -> 0.0017s
== 20210719113216 CreateGames: migrated (0.0017s) =============================

== 20210719113221 CreateReviews: migrating ====================================
-- create_table(:reviews)
   -> 0.0006s
== 20210719113221 CreateReviews: migrated (0.0007s) ===========================

== 20210719142820 CreateUsers: migrating ======================================
-- create_table(:users)
   -> 0.0010s
== 20210719142820 CreateUsers: migrated (0.0012s) =============================

== 20210719142825 AddUserIdToReviews: migrating ===============================
-- add_column(:reviews, :user_id, :integer)
   -> 0.0009s
== 20210719142825 AddUserIdToReviews: migrated (0.0009s) ======================

ðŸŒ± Seeding data...
ðŸŒ± Done seeding!
#+END_SRC

I then ran the following 'rake server' task:
#+BEGIN_SRC bash
bundle exec rake server
#+END_SRC

I then modified the contents of 'app/models/application_controller.rb' with the following:
#+BEGIN_SRC ruby
class ApplicationController < Sinatra::Base

  get '/' do
    { message: "Hello world" }.to_json
  end

  get "/games" do
    # Get all the games from the database
    games = Game.all()
    # Return a JSON response with an array of all the game data
    games.to_json()
  end

end
#+END_SRC

I then navigated to the related '/games' endpoint with a web browser:
-  http://localhost:9292/games 

I then made the following revisions to the 'app/models/application_controller.rb' file:
#+BEGIN_SRC ruby
class ApplicationController < Sinatra::Base
  # Add this line to set the 'Content-Type' header for all responses:
  set :default_content_type, "application/json"

  get '/' do
    { message: "Hello world" }.to_json
  end

  get "/games" do
    # NOTE: This was commented out since they ended up using the 
    # 10 game limit for this API endpoint anyway:
    # Get all the games from the database
    # games = Game.all()
    games = Game.all.order(:title).limit(10)
    # Return a JSON response with an array of all the game data
    games.to_json()
  end

  # Example of using a 'Dynamic Route' so that the controller can handle
  # 'params' hash that contain values:
  # Use the ':id' syntax to create a dynamic route:

  # NOTE: Using a 'GET' request with '/games/10' would make the 'params' hash look
  # like the following:
  # { "id" => "10" }
  get "/games/:id" do 
    # Look up the game in the database using its ID
    game = Game.find(params[:id])
    # Send a JSON-formatted response of the game data
    game.to_json()
  end

  # NOTE: The following two sections were provided as examples in the lab itself
  # so I included them as related API endpoints anyway:
  # Example pattern to sort by title:
  get "/games_sorted_by_title" do
    games = Game.all.order(:title)
    games.to_json()
  end

  # Example pattern to get the first 10 games
  get "/games_first_10" do 
    games = Game.all.order(:title).limit(10)
    games.to_json()
  end

end
#+END_SRC

I then called the API endpoint by visiting the following URL in a browser:
- http://localhost:9292/games/1

This resulted in the following JSON data being returned:
#+BEGIN_SRC json
{
  "id": 1,
  "title": "F.E.A.R.",
  "genre": "Trivia",
  "platform": "Super Nintendo Entertainment System",
  "price": 1,
  "created_at": "2022-09-16T21:18:46.971Z",
  "updated_at": "2022-09-16T21:18:46.971Z"
}
#+END_SRC

I then modified the '/application_controller.rb' file to include the following revision to make sure I used the 'include:' parameter to the '#to_json' method so that I can obtain JSON data related to the associated models for the games and reviews:
#+BEGIN_SRC ruby
  get "/games/:id" do 
    # Look up the game in the database using its ID
    game = Game.find(params[:id])
    # Send a JSON-formatted response of the game data
    game.to_json(include: :reviews)
  end
#+END_SRC

Using the 'http://localhost:9292/games/1' API endpoint then resulted in the following JSON output which includes additional information by the game's associated 'reviews' data as well:
#+BEGIN_SRC bash
{
  "id": 1,
  "title": "F.E.A.R.",
  "genre": "Trivia",
  "platform": "Super Nintendo Entertainment System",
  "price": 1,
  "created_at": "2022-09-16T21:18:46.971Z",
  "updated_at": "2022-09-16T21:18:46.971Z",
  "reviews": [
    {
      "id": 1,
      "score": 7,
      "comment": "Explicabo nobis in ut.",
      "game_id": 1,
      "created_at": "2022-09-16T21:18:46.977Z",
      "updated_at": "2022-09-16T21:18:46.977Z",
      "user_id": 1
    },
    {
      "id": 2,
      "score": 10,
      "comment": "Doloremque sit eligendi nobis.",
      "game_id": 1,
      "created_at": "2022-09-16T21:18:46.979Z",
      "updated_at": "2022-09-16T21:18:46.979Z",
      "user_id": 4
    },
    {
      "id": 3,
      "score": 9,
      "comment": "Impedit sed blanditiis sequi.",
      "game_id": 1,
      "created_at": "2022-09-16T21:18:46.982Z",
      "updated_at": "2022-09-16T21:18:46.982Z",
      "user_id": 3
    },
    {
      "id": 4,
      "score": 1,
      "comment": "Repellat maiores quia doloribus.",
      "game_id": 1,
      "created_at": "2022-09-16T21:18:46.984Z",
      "updated_at": "2022-09-16T21:18:46.984Z",
      "user_id": 4
    },
    {
      "id": 5,
      "score": 3,
      "comment": "Aliquid laborum officia laboriosam.",
      "game_id": 1,
      "created_at": "2022-09-16T21:18:46.987Z",
      "updated_at": "2022-09-16T21:18:46.987Z",
      "user_id": 7
    }
  ]
}
#+END_SRC

I then modified the '/application_controller.rb' file to include a deeper nested relationship inside the hash itself:
#+BEGIN_SRC ruby
  get '/games/:id' do
    game = Game.find(params[:id])

    # include associated reviews in the JSON response
    game.to_json(include: { reviews: { include: :user } })
  end
#+END_SRC

The 'http://localhost:9292/games/1' API endpoint returned the following data:
#+BEGIN_SRC json
{
  "id": 1,
  "title": "F.E.A.R.",
  "genre": "Trivia",
  "platform": "Super Nintendo Entertainment System",
  "price": 1,
  "created_at": "2022-09-16T21:18:46.971Z",
  "updated_at": "2022-09-16T21:18:46.971Z",
  "reviews": [
    {
      "id": 1,
      "score": 7,
      "comment": "Explicabo nobis in ut.",
      "game_id": 1,
      "created_at": "2022-09-16T21:18:46.977Z",
      "updated_at": "2022-09-16T21:18:46.977Z",
      "user_id": 1,
      "user": {
        "id": 1,
        "name": "Dr. Kendall Predovic",
        "created_at": "2022-09-16T21:18:46.945Z",
        "updated_at": "2022-09-16T21:18:46.945Z"
      }
    },
    {
      "id": 2,
      "score": 10,
      "comment": "Doloremque sit eligendi nobis.",
      "game_id": 1,
      "created_at": "2022-09-16T21:18:46.979Z",
      "updated_at": "2022-09-16T21:18:46.979Z",
      "user_id": 4,
      "user": {
        "id": 4,
        "name": "Ms. Daryl Rodriguez",
        "created_at": "2022-09-16T21:18:46.952Z",
        "updated_at": "2022-09-16T21:18:46.952Z"
      }
    },
    {
      "id": 3,
      "score": 9,
      "comment": "Impedit sed blanditiis sequi.",
      "game_id": 1,
      "created_at": "2022-09-16T21:18:46.982Z",
      "updated_at": "2022-09-16T21:18:46.982Z",
      "user_id": 3,
      "user": {
        "id": 3,
        "name": "Fr. Beata Weimann",
        "created_at": "2022-09-16T21:18:46.950Z",
        "updated_at": "2022-09-16T21:18:46.950Z"
      }
    },
    {
      "id": 4,
      "score": 1,
      "comment": "Repellat maiores quia doloribus.",
      "game_id": 1,
      "created_at": "2022-09-16T21:18:46.984Z",
      "updated_at": "2022-09-16T21:18:46.984Z",
      "user_id": 4,
      "user": {
        "id": 4,
        "name": "Ms. Daryl Rodriguez",
        "created_at": "2022-09-16T21:18:46.952Z",
        "updated_at": "2022-09-16T21:18:46.952Z"
      }
    },
    {
      "id": 5,
      "score": 3,
      "comment": "Aliquid laborum officia laboriosam.",
      "game_id": 1,
      "created_at": "2022-09-16T21:18:46.987Z",
      "updated_at": "2022-09-16T21:18:46.987Z",
      "user_id": 7,
      "user": {
        "id": 7,
        "name": "Ms. Glynda Haag",
        "created_at": "2022-09-16T21:18:46.959Z",
        "updated_at": "2022-09-16T21:18:46.959Z"
      }
    }
  ]
}
#+END_SRC

I then used the 'only' option to be even more selected in the '/application_controller.rb' file:
#+BEGIN_SRC ruby
  get "/games/:id" do 
    # Look up the game in the database using its ID
    game = Game.find(params[:id])
    # Send a JSON-formatted response of the game data
    # NOTE: Commented out as we later used a deeper nested relationship:
    # game.to_json(include: :reviews)
    # NOTE: Commented out as we were even MORE selective with the 'only' parameter:
    # game.to_json(include: { reviews: { include: :user } })
    # Using the 'only' parameter to be more selective:
    game.to_json(only: [:id, :title, :genre, :price], include: {
      reviews: { only: [:comment, :score], include: {
        user: { only: [:name] }
      }}
    })
  end
#+END_SRC

This resulted in the following JSON output for the 'http://localhost:9292/games/1' API endpoint:
#+BEGIN_SRC json
{
  "id": 1,
  "title": "F.E.A.R.",
  "genre": "Trivia",
  "price": 1,
  "reviews": [
    {
      "score": 7,
      "comment": "Explicabo nobis in ut.",
      "user": {
        "name": "Dr. Kendall Predovic"
      }
    },
    {
      "score": 10,
      "comment": "Doloremque sit eligendi nobis.",
      "user": {
        "name": "Ms. Daryl Rodriguez"
      }
    },
    {
      "score": 9,
      "comment": "Impedit sed blanditiis sequi.",
      "user": {
        "name": "Fr. Beata Weimann"
      }
    },
    {
      "score": 1,
      "comment": "Repellat maiores quia doloribus.",
      "user": {
        "name": "Ms. Daryl Rodriguez"
      }
    },
    {
      "score": 3,
      "comment": "Aliquid laborum officia laboriosam.",
      "user": {
        "name": "Ms. Glynda Haag"
      }
    }
  ]
}
#+END_SRC